// Generated by gencpp from file gazebo_sfm_plugin/TaskAssignmentGoal.msg
// DO NOT EDIT!


#ifndef GAZEBO_SFM_PLUGIN_MESSAGE_TASKASSIGNMENTGOAL_H
#define GAZEBO_SFM_PLUGIN_MESSAGE_TASKASSIGNMENTGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace gazebo_sfm_plugin
{
template <class ContainerAllocator>
struct TaskAssignmentGoal_
{
  typedef TaskAssignmentGoal_<ContainerAllocator> Type;

  TaskAssignmentGoal_()
    : task_names()
    , positions()
    , target_types()  {
    }
  TaskAssignmentGoal_(const ContainerAllocator& _alloc)
    : task_names(_alloc)
    , positions(_alloc)
    , target_types(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _task_names_type;
  _task_names_type task_names;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _positions_type;
  _positions_type positions;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _target_types_type;
  _target_types_type target_types;





  typedef boost::shared_ptr< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> const> ConstPtr;

}; // struct TaskAssignmentGoal_

typedef ::gazebo_sfm_plugin::TaskAssignmentGoal_<std::allocator<void> > TaskAssignmentGoal;

typedef boost::shared_ptr< ::gazebo_sfm_plugin::TaskAssignmentGoal > TaskAssignmentGoalPtr;
typedef boost::shared_ptr< ::gazebo_sfm_plugin::TaskAssignmentGoal const> TaskAssignmentGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator1> & lhs, const ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator2> & rhs)
{
  return lhs.task_names == rhs.task_names &&
    lhs.positions == rhs.positions &&
    lhs.target_types == rhs.target_types;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator1> & lhs, const ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_sfm_plugin

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bcdd9e4ed3cb46133c77abe8391c30a";
  }

  static const char* value(const ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bcdd9e4ed3cb461ULL;
  static const uint64_t static_value2 = 0x33c77abe8391c30aULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_sfm_plugin/TaskAssignmentGoal";
  }

  static const char* value(const ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal definition\n"
"string[] task_names\n"
"geometry_msgs/Point[] positions\n"
"string[] target_types\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_names);
      stream.next(m.positions);
      stream.next(m.target_types);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskAssignmentGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_sfm_plugin::TaskAssignmentGoal_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "task_names: ";
    if (v.task_names.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.task_names.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.task_names[i]);
    }
    if (v.task_names.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "positions: ";
    if (v.positions.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.positions[i]);
    }
    if (v.positions.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target_types: ";
    if (v.target_types.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.target_types.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.target_types[i]);
    }
    if (v.target_types.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_SFM_PLUGIN_MESSAGE_TASKASSIGNMENTGOAL_H
