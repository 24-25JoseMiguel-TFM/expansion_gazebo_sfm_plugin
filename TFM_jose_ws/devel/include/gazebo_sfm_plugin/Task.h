// Generated by gencpp from file gazebo_sfm_plugin/Task.msg
// DO NOT EDIT!


#ifndef GAZEBO_SFM_PLUGIN_MESSAGE_TASK_H
#define GAZEBO_SFM_PLUGIN_MESSAGE_TASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_sfm_plugin
{
template <class ContainerAllocator>
struct Task_
{
  typedef Task_<ContainerAllocator> Type;

  Task_()
    : name()
    , x(0.0)
    , y(0.0)
    , for_humans(false)
    , for_robots(false)  {
    }
  Task_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , x(0.0)
    , y(0.0)
    , for_humans(false)
    , for_robots(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef uint8_t _for_humans_type;
  _for_humans_type for_humans;

   typedef uint8_t _for_robots_type;
  _for_robots_type for_robots;





  typedef boost::shared_ptr< ::gazebo_sfm_plugin::Task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_sfm_plugin::Task_<ContainerAllocator> const> ConstPtr;

}; // struct Task_

typedef ::gazebo_sfm_plugin::Task_<std::allocator<void> > Task;

typedef boost::shared_ptr< ::gazebo_sfm_plugin::Task > TaskPtr;
typedef boost::shared_ptr< ::gazebo_sfm_plugin::Task const> TaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_sfm_plugin::Task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_sfm_plugin::Task_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_sfm_plugin::Task_<ContainerAllocator1> & lhs, const ::gazebo_sfm_plugin::Task_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.for_humans == rhs.for_humans &&
    lhs.for_robots == rhs.for_robots;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_sfm_plugin::Task_<ContainerAllocator1> & lhs, const ::gazebo_sfm_plugin::Task_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_sfm_plugin

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_sfm_plugin::Task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_sfm_plugin::Task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_sfm_plugin::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_sfm_plugin::Task_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_sfm_plugin::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_sfm_plugin::Task_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_sfm_plugin::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de59c720fc23a7eda058f059c469339b";
  }

  static const char* value(const ::gazebo_sfm_plugin::Task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde59c720fc23a7edULL;
  static const uint64_t static_value2 = 0xa058f059c469339bULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_sfm_plugin::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_sfm_plugin/Task";
  }

  static const char* value(const ::gazebo_sfm_plugin::Task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_sfm_plugin::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"float64 x\n"
"float64 y\n"
"bool for_humans\n"
"bool for_robots\n"
;
  }

  static const char* value(const ::gazebo_sfm_plugin::Task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_sfm_plugin::Task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.for_humans);
      stream.next(m.for_robots);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_sfm_plugin::Task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_sfm_plugin::Task_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "for_humans: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.for_humans);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "for_robots: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.for_robots);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_SFM_PLUGIN_MESSAGE_TASK_H
